// <auto-generated />
using System;
using HouseFinder360.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HouseFinder360.Infrastructure.Migrations
{
    [DbContext(typeof(HouseFinder360DbContext))]
    [Migration("20230303191652_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HouseFinder360.Domain.Property.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("HouseFinder360.Domain.Property.SaleProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("integer");

                    b.Property<int>("PropertyState")
                        .HasColumnType("integer");

                    b.Property<int>("RegisterStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("SaleProperty", (string)null);
                });

            modelBuilder.Entity("HouseFinder360.Domain.Property.ValueObjects.PropertyAdditionalInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("AvailableFrom")
                        .HasColumnType("date");

                    b.Property<int>("BalconyNumber")
                        .HasColumnType("integer");

                    b.Property<int>("BathroomNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("HaveKitchen")
                        .HasColumnType("boolean");

                    b.Property<bool>("HaveParking")
                        .HasColumnType("boolean");

                    b.Property<bool>("HaveStorage")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<int>("ToiletNumber")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("YearOfBuild")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("PropertyAdditionalInfo");
                });

            modelBuilder.Entity("HouseFinder360.Domain.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HouseFinder360.Domain.Property.SaleProperty", b =>
                {
                    b.HasOne("HouseFinder360.Domain.Property.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HouseFinder360.Domain.Property.ValueObjects.Area", "Area", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .HasColumnType("uuid");

                            b1.Property<int>("SquadMeter")
                                .HasColumnType("integer");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.OwnsOne("HouseFinder360.Domain.Property.ValueObjects.FloorInformation", "FloorInformation", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Floor")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("TotalFloors")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.OwnsOne("HouseFinder360.Domain.Property.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Price");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.OwnsOne("HouseFinder360.Domain.Property.ValueObjects.PropertyType", "PropertyType", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PropertyTypeDeclaration")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("TypeOfProperty")
                                .HasColumnType("integer");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Area")
                        .IsRequired();

                    b.Navigation("FloorInformation")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("PropertyType")
                        .IsRequired();
                });

            modelBuilder.Entity("HouseFinder360.Domain.Property.ValueObjects.PropertyAdditionalInfo", b =>
                {
                    b.HasOne("HouseFinder360.Domain.Property.SaleProperty", null)
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("HouseFinder360.Domain.Property.ValueObjects.PropertyAdditionalInfo", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HouseFinder360.Domain.Property.SaleProperty", b =>
                {
                    b.Navigation("AdditionalInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
